github.com/bytedance/sonic v1.11.6 h1:oUp34TzMlL+OY1OUWxHqsdkgC/Zfc85zGqw9siXjrc0=
github.com/bytedance/sonic v1.11.6/go.mod h1:LysEHSvpvDySVdC2f87zGWf6CIKJcAvqab1ZaiQtds4=
github.com/bytedance/sonic/loader v0.1.1 h1:c+e5Pt1k/cy5wMveRDyk2X4B9hF4g7an8N3zCYjJFNM=
github.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
github.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=
github.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=
github.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=
github.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/envoyproxy/protoc-gen-validate v1.1.0 h1:tntQDh69XqOCOZsDz0lVJQez/2L6Uu2PdjCQwWCJ3bM=
github.com/envoyproxy/protoc-gen-validate v1.1.0/go.mod h1:sXRDRVmzEbkM7CVcM06s9shE/m23dg3wzjl0UWqJ2q4=
github.com/gabriel-vasile/mimetype v1.4.3 h1:in2uUcidCuFcDKtdcBxlR0rJ1+fsokWf+uqxgUFjbI0=
github.com/gabriel-vasile/mimetype v1.4.3/go.mod h1:d8uq/6HKRL6CGdk+aubisF/M5GcPfT7nKyLpA0lbSSk=
github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
github.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=
github.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=
github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
github.com/go-playground/validator/v10 v10.20.0 h1:K9ISHbSaI0lyB2eWMPJo+kOS/FBExVwjEviJTixqxL8=
github.com/go-playground/validator/v10 v10.20.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
github.com/go-sql-driver/mysql v1.7.0 h1:ueSltNNllEqE3qcWBTD0iQd3IpL/6U+mJxLkazJ7YPc=
github.com/go-sql-driver/mysql v1.7.0/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=
github.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=
github.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
github.com/iancoleman/strcase v0.3.0 h1:nTXanmYxhfFAMjZL34Ov6gkzEsSJZ5DbhxWjvSASxEI=
github.com/iancoleman/strcase v0.3.0/go.mod h1:iwCmte+B7n89clKwxIoIXy/HfoL7AsD47ZCWhYzw7ho=
github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
github.com/kirinlabs/HttpRequest v1.1.2 h1:W7EkRCTnxwq9PcIMXvITX8rCHfoPNzqR13RObSEe6bI=
github.com/kirinlabs/HttpRequest v1.1.2/go.mod h1:XV38fA4rXZox83tlEV9KIQ7Cdsut319x6NGzVLuRlB8=
github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
github.com/klauspost/cpuid/v2 v2.2.7 h1:ZWSB3igEs+d0qvnxR/ZBzXVmxkgt8DdzP6m9pfuVLDM=
github.com/klauspost/cpuid/v2 v2.2.7/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
github.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=
github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
github.com/lyft/protoc-gen-star/v2 v2.0.4-0.20230330145011-496ad1ac90a4 h1:sIXJOMrYnQZJu7OB7ANSF4MYri2fTEGIsRLz6LwI4xE=
github.com/lyft/protoc-gen-star/v2 v2.0.4-0.20230330145011-496ad1ac90a4/go.mod h1:amey7yeodaJhXSbf/TlLvWiqQfLOSpEk//mLlc+axEk=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
github.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=
github.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=
github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
golang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
golang.org/x/arch v0.8.0 h1:3wRIsP3pM4yUptoR96otTUOXI367OS0+c9eeRi9doIc=
golang.org/x/arch v0.8.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
golang.org/x/mod v0.21.0 h1:vvrHzRwRfVKSiLrG+d4FMl/Qi4ukBCE6kZlTUkDYRT0=
golang.org/x/mod v0.21.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=
golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
golang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=
golang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
golang.org/x/tools v0.26.0 h1:v/60pFQmzmT9ExmjDv2gGIfi3OqfKoEP6I5+umXlbnQ=
golang.org/x/tools v0.26.0/go.mod h1:TPVVj70c7JJ3WCazhD8OdXcZg/og+b9+tH/KxylGwH0=
google.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
google.golang.org/genproto/googleapis/rpc v0.0.0-20240814211410-ddb44dafa142 h1:e7S5W7MGGLaSu8j3YjdezkZ+m1/Nm0uRVRMEMGk26Xs=
google.golang.org/genproto/googleapis/rpc v0.0.0-20240814211410-ddb44dafa142/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=
google.golang.org/grpc v1.67.1 h1:zWnc1Vrcno+lHZCOofnIMvycFcc0QRGIzm9dhnDX68E=
google.golang.org/grpc v1.67.1/go.mod h1:1gLDyUQU7CTLJI90u3nXZ9ekeghjeM7pTDZlqFNg2AA=
google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gorm.io/driver/mysql v1.5.7 h1:MndhOPYOfEp2rHKgkZIhJ16eVUIRf2HmzgoPmh7FCWo=
gorm.io/driver/mysql v1.5.7/go.mod h1:sEtPWMiqiN1N1cMXoXmBbd8C6/l+TESwriotuRRpkDM=
gorm.io/gorm v1.25.7 h1:VsD6acwRjz2zFxGO50gPO6AkNs7KKnvfzUjHQhZDz/A=
gorm.io/gorm v1.25.7/go.mod h1:hbnx/Oo0ChWMn1BIhpy1oYozzpM15i4YPuHDmfYtwg8=
gorm.io/gorm v1.25.12 h1:I0u8i2hWQItBq1WfE0o2+WuL9+8L21K9e2HHSTE/0f8=
gorm.io/gorm v1.25.12/go.mod h1:xh7N7RHfYlNc5EmcI/El95gXusucDrQnHXe0+CgWcLQ=
nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=
rsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=

use regex::RegexSet;
use std::sync::Arc;

use super::util::{random_str, ClientManager, KEY_WORDS, NOT_FOUND};
use ctlh_aamapp::data::*;
use ctlh_aamapp_api::interface::{AamappClient, AamappServerHandler, Result};
use ctlh_aamapp_check::{aamapp_api::*, prelude::*};
use ctlh_err_msg::*;
use ctlh_trade_common::{
    brpc_std,
    data::{Error as DataError, Header},
};
use std::fmt::Write;
use tracing::*;

pub struct AamappDistributor {
    pub regex: RegexSet,
    ///buten client list, every buten has a client
    pub buten_clients: Vec<(Arc<AamappClient>, String)>,
    ///group client list, every group has a client, for `distribute all`
    pub group_clients: Vec<Arc<AamappClient>>,
}

pub struct AamappDistributorHandler {
    pub distributor: Arc<AamappDistributor>,
}

impl AamappDistributorHandler {
    pub fn new(
        regex: RegexSet,
        buten_clients: Vec<(Arc<AamappClient>, String)>,
        group_clients: Vec<Arc<AamappClient>>,
    ) -> AamappDistributorHandler {
        AamappDistributorHandler {
            distributor: Arc::new(AamappDistributor {
                regex,
                buten_clients,
                group_clients,
            }),
        }
    }
}

impl ClientManager<AamappClient> for AamappDistributorHandler {}

#[async_trait::async_trait]
impl AamappServerHandler for AamappDistributorHandler {
    async fn ping(&self) -> Result<()> {
        let start = std::time::Instant::now();
        let (result, addr) = match Self::random_get_client(&self.distributor.buten_clients) {
            Some((cli, addr)) => (cli.ping().await, addr),
            None => (Err(anyhow::anyhow!("find client failed")), NOT_FOUND.into()),
        };

        metrics::histogram!("distributor.access_log", start.elapsed(),
                        "service" => "aamapp",
                        "api" => "ping",
                        "result" => if result.is_ok() { "ok" } else { "err" },
                        "addr" => addr);

        result
    }

    async fn get_fop_mediate_list(
        &self,
        header: Header,
        mediate_code: Option<String>,
        mediate_name: Option<String>,
        status_flg: Option<ctlh_common::data::OffOn>,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::MediateItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_mediate_list, check_get_fop_mediate_list, header, mediate_code, mediate_name, status_flg; None;)
    }

    async fn get_mediate_customer_list(
        &self,
        header: Header,
        mediate_code: String,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::CustomerItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_mediate_customer_list, check_get_mediate_customer_list, header, mediate_code; None;)
    }

    async fn get_account_info_list(
        &self,
        header: Header,
        margincall_flg: Option<ctlh_common::data::OffOn>,
        refer_time_cls: ctlh_common::data::ReferTimeCls,
        all_search_flg: ctlh_common::data::OffOn,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::AccountInfoItem>>,
        Option<Vec<DataError>>,
    )> {
        let start = std::time::Instant::now();
        let ip = header.remote_ip.clone();
        let id = random_str();

        let (res, addr) = request!(Self, self, "aamapp", get_account_info_list, check_get_account_info_list, header, ip, id, margincall_flg, refer_time_cls, all_search_flg; None;);
        let res1 = match res {
            Ok(ref v) => {
                let mut v1 = v.clone();
                v1.1 = v1.1.map(|mut v| {
                    v.iter_mut().for_each(|x| {
                        x.customer_name = "***".into();
                    });
                    v
                });
                Ok(v1)
            }
            Err(ref e) => Err(e),
        };
        response!("aamapp", get_account_info_list, ip, res1, start, id, addr);
        res
    }

    async fn get_commission(
        &self,
        header: Header,
        commission_code: u16,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::CommissionItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_commission, check_get_commission, header, commission_code; None;)
    }

    async fn get_fop_customer_commission(
        &self,
        header: Header,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::NowCommissionInfo>>,
        Option<Vec<ctlh_aamapp::data::NextCommissionInfo>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_customer_commission, check_get_fop_customer_commission, header, ; None, None;)
    }

    async fn get_product_commission_list(
        &self,
        header: ctlh_aam::data::Header,
        product_detail_id: u8,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::CommissionSummuryInfo>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_product_commission_list, check_get_product_commission_list, header, product_detail_id; None;)
    }

    async fn get_fop_system_position_limit_list(
        &self,
        header: ctlh_trade_common::data::Header,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::SystemPositionLimitItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_system_position_limit_list, check_get_fop_system_position_limit_list, header,; None;)
    }
    async fn get_fop_customer_guarantee(
        &self,
        header: ctlh_trade_common::data::Header,
    ) -> Result<(
        ResultType,
        Option<ctlh_aamapp::data::GuaranteeInfoNow>,
        Option<Vec<ctlh_aamapp::data::SellOpMinCurrentItem>>,
        Option<ctlh_aamapp::data::GuaranteeInfoNext>,
        Option<Vec<ctlh_aamapp::data::SellOpMinNextItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_customer_guarantee, check_get_fop_customer_guarantee, header, ; None, None, None, None;)
    }
    async fn get_customer_position_limit_list(
        &self,
        header: ctlh_trade_common::data::Header,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::PositionLimitItem>>,
        Option<Vec<ctlh_aamapp::data::PositionLimitItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_customer_position_limit_list, check_get_customer_position_limit_list, header, ; None, None;)
    }
    async fn get_fop_customer_attribute(
        &self,
        header: ctlh_trade_common::data::Header,
    ) -> Result<(
        ResultType,
        Option<ctlh_aamapp::data::CustomerAttribute>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_customer_attribute, check_get_fop_customer_attribute, header, ; None;)
    }
    async fn fop_set_customer_commission(
        &self,
        header: ctlh_trade_common::data::Header,
        set_commission_items: Vec<ctlh_aamapp::data::SetCommissionItem>,
        update_flg: ctlh_common::data::OffOn,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_customer_commission, check_fop_set_customer_commission, header, set_commission_items, update_flg; ;)
    }
    async fn set_system_position_limit_list(
        &self,
        header: ctlh_trade_common::data::Header,
        position_limit_list: Vec<ctlh_aamapp::data::PositionLimitAdmin>,
        update_flg: ctlh_common::data::OffOn,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", set_system_position_limit_list, check_set_system_position_limit_list, header, position_limit_list, update_flg; ;)
    }
    async fn fop_set_customer_guarantee(
        &self,
        header: ctlh_trade_common::data::Header,
        apply_start_date: brpc_std::data::Date,
        maintenance_guarantee_code: Option<u16>,
        base_guarantee_code: Option<u16>,
        required_guarantee_code: Option<u16>,
        min_guarantee_required: Option<brpc_std::data::Decimal>,
        sell_op_min_next_list: Vec<ctlh_aamapp::data::SellOpMinNextItem>,
        update_flg: ctlh_common::data::OffOn,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_customer_guarantee, check_fop_set_customer_guarantee, header, apply_start_date, maintenance_guarantee_code, base_guarantee_code, required_guarantee_code, min_guarantee_required, sell_op_min_next_list, update_flg; ;)
    }

    async fn get_fop_mediate_name(
        &self,
        header: ctlh_trade_common::data::Header,
        mediate_code: String,
    ) -> Result<(ResultType, Option<String>, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", get_fop_mediate_name, check_get_fop_mediate_name, header, mediate_code; None;)
    }

    async fn get_fop_customer_internal(
        &self,
        header: ctlh_trade_common::data::Header,
    ) -> Result<(
        ResultType,
        Option<ctlh_aamapp::data::CustomerStatusInfo>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_customer_internal, check_get_fop_customer_internal, header, ; None;)
    }

    async fn get_emergency_guarantee(
        &self,
        header: ctlh_trade_common::data::Header,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::EmergencyGuaranteeSettingInfo>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_emergency_guarantee, check_get_emergency_guarantee, header, ; None;)
    }

    async fn fop_set_close_out(
        &self,
        header: ctlh_trade_common::data::Header,
        trade_date: brpc_std::data::Date,
        dept_code: String,
        close_out_item: Vec<ctlh_aamapp::data::CloseOutItem>,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_close_out, check_fop_set_close_out, header, trade_date, dept_code, close_out_item; ;)
    }

    async fn get_fop_deposit_daily_report(
        &self,
        header: ctlh_trade_common::data::Header,
        trade_date: brpc_std::data::Date,
    ) -> Result<(
        ResultType,
        Option<ctlh_aamapp::data::DepositDailyReportInfo>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_deposit_daily_report, check_get_fop_deposit_daily_report, header, trade_date; None;)
    }

    async fn fop_set_deposit_daily_report(
        &self,
        header: ctlh_trade_common::data::Header,
        deposit_ag: brpc_std::data::Decimal,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_deposit_daily_report, check_fop_set_deposit_daily_report, header, deposit_ag; ;)
    }

    async fn get_fop_commission(
        &self,
        header: ctlh_trade_common::data::Header,
        commission_code: Option<u16>,
        commission_name: Option<String>,
        product_detail_id: Option<u8>,
        default_flg: Option<ctlh_common::data::OffOn>,
        status_flg: Option<ctlh_common::data::OffOn>,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::CommissionListItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_commission, check_get_fop_commission, header, commission_code, commission_name, product_detail_id, default_flg, status_flg; None;)
    }

    async fn fop_set_commission(
        &self,
        header: ctlh_trade_common::data::Header,
        commission_detail_list: Vec<ctlh_aamapp::data::CommissionDetail>,
        update_flg: ctlh_common::data::OffOn,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_commission, check_fop_set_commission, header, commission_detail_list, update_flg; ;)
    }

    async fn fop_set_customer_position_limit(
        &self,
        header: ctlh_trade_common::data::Header,
        position_limit_items: Vec<ctlh_aamapp::data::PositionLimitSetItem>,
        apply_start_date: brpc_std::data::Date,
        update_flg: ctlh_common::data::OffOn,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_customer_position_limit, check_fop_set_customer_position_limit, header, position_limit_items, apply_start_date, update_flg; ;)
    }

    async fn fop_set_sales_commission(
        &self,
        header: ctlh_trade_common::data::Header,
        sales_code: String,
        set_commission_items: Vec<ctlh_aamapp::data::SetCommissionItem>,
        update_flg: ctlh_common::data::OffOn,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_sales_commission, check_fop_set_sales_commission, header, sales_code, set_commission_items, update_flg; ;)
    }

    async fn fop_set_guarantee(
        &self,
        header: ctlh_trade_common::data::Header,
        guarantee_detail: ctlh_aamapp::data::GuaranteeDetail,
        update_flg: ctlh_common::data::OffOn,
    ) -> Result<(
        ctlh_common::data::ResultType,
        Option<Vec<ctlh_trade_common::data::Error>>,
    )> {
        invoke_api!(Self, self, "aamapp", fop_set_guarantee, check_fop_set_guarantee, header, guarantee_detail, update_flg; ; )
    }

    async fn get_position_summary(
        &self,
        header: ctlh_trade_common::data::Header,
        detail_total_cls: ctlh_aamapp::data::DetailTotalCls,
        product_cls: Option<ctlh_common::data::ProductCls>,
        product_detail_id_list: Option<Vec<u8>>,
        security_code: Option<String>,
        total_settlement_flg: ctlh_common::data::OffOn,
        all_search_flg: ctlh_common::data::OffOn,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::PositionSummaryDataItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_position_summary, check_get_position_summary, header, detail_total_cls, product_cls, product_detail_id_list, security_code, total_settlement_flg, all_search_flg; None;)
    }

    async fn get_fop_transfer_money(
        &self,
        header: ctlh_trade_common::data::Header,
        request_date: brpc_std::data::Date,
    ) -> Result<(
        ResultType,
        Option<ctlh_aamapp::data::DeliveryAmountMovement>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_transfer_money, check_get_fop_transfer_money, header, request_date; None;)
    }

    async fn fop_set_trade_authority_change(
        &self,
        header: ctlh_trade_common::data::Header,
        customer_info: Vec<ctlh_aamapp::data::TradeRestriction>,
        update_cls: ctlh_common::data::UpdateCls,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::TradeRestriction>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", fop_set_trade_authority_change, check_fop_set_trade_authority_change, header, customer_info, update_cls; None;)
    }

    async fn get_sq_settlement_list(
        &self,
        header: ctlh_trade_common::data::Header,
        delivery_cls: ctlh_aamapp::data::DeliveryType,
        delivery_month: u32,
        delivery_week: Option<u8>,
        right_cls: Vec<ctlh_common::data::RightCls>,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::SqRightDetailItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_sq_settlement_list, check_get_sq_settlement_list, header, delivery_cls, delivery_month, delivery_week, right_cls; None;)
    }

    async fn get_position_list_internal(
        &self,
        header: ctlh_trade_common::data::Header,
        product_cls: Option<ctlh_common::data::ProductCls>,
        product_detail_id_list: Option<Vec<u8>>,
        security_code: Option<String>,
        today_settlement_flg: ctlh_common::data::OffOn,
        all_search_flg: ctlh_common::data::OffOn,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::PositionReferInfo>>,
        Option<Decimal>,
        Option<Decimal>,
        Option<Vec<DataError>>,
    )> {
        let start = std::time::Instant::now();
        let ip = header.remote_ip.clone();
        let id = random_str();

        let (res, addr) = request!(Self, self, "aamapp", get_position_list_internal, check_get_position_list_internal, header, ip, id, product_cls, product_detail_id_list, security_code, today_settlement_flg, all_search_flg; None, None, None;);
        let res1 = match res {
            Ok(ref v) => {
                let mut v1 = v.clone();
                v1.1 = v1.1.map(|mut v| {
                    v.iter_mut().for_each(|x| {
                        x.customer_name = "***".into();
                    });
                    v
                });
                Ok(v1)
            }
            Err(ref e) => Err(e),
        };
        response!(
            "aamapp",
            get_position_list_internal,
            ip,
            res1,
            start,
            id,
            addr
        );
        res
    }

    async fn get_fop_account_list(
        &self,
        header: ctlh_trade_common::data::Header,
        branch_code: Option<String>,
        account_code: Option<String>,
        customer_name: Option<String>,
        prop_agency: Option<ctlh_common::data::PropAgency>,
        in_branch_code: Option<String>,
        mediate_code: Option<String>,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::AccountListItem>>,
        Option<Vec<DataError>>,
    )> {
        let start = std::time::Instant::now();
        let ip = header.remote_ip.clone();
        let id = random_str();

        let (res, addr) = request!(Self, self, "aamapp", get_fop_account_list, check_get_fop_account_list, header, ip, id, branch_code, account_code, customer_name, prop_agency, in_branch_code, mediate_code; None;);
        let res1 = match res {
            Ok(ref v) => {
                let mut v1 = v.clone();
                v1.1 = v1.1.map(|mut v| {
                    v.iter_mut().for_each(|x| {
                        x.customer_name = "***".into();
                    });
                    v
                });
                Ok(v1)
            }
            Err(ref e) => Err(e),
        };
        response!("aamapp", get_fop_account_list, ip, res1, start, id, addr);
        res
    }

    async fn fop_set_emergency_guarantee(
        &self,
        header: ctlh_trade_common::data::Header,
        emergency_guarantee_list: Vec<EmergencyGuaranteeInfoSet>,
    ) -> Result<(ResultType, Option<Vec<DataError>>)> {
        invoke_api!(Self, self, "aamapp", fop_set_emergency_guarantee, check_fop_set_emergency_guarantee, header, emergency_guarantee_list; ;)
    }

    async fn get_fop_guarantee(
        &self,
        header: ctlh_trade_common::data::Header,
        guarantee_code: Option<u16>,
        guarantee_name: Option<String>,
        guarantee_cls: Option<GuaranteeCls>,
        status_flg: Option<OffOn>,
        default_flg: Option<OffOn>,
    ) -> Result<(
        ResultType,
        Option<Vec<GuaranteeItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_guarantee, check_get_fop_guarantee, header, guarantee_code, guarantee_name, guarantee_cls, status_flg, default_flg; None;)
    }

    async fn get_fop_sales_commission(
        &self,
        header: ctlh_trade_common::data::Header,
        sales_code: String,
    ) -> Result<(
        ResultType,
        Option<Vec<CommissionInfo>>,
        Option<Vec<CommissionInfo>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_fop_sales_commission, check_get_fop_sales_commission, header, sales_code; None, None;)
    }

    async fn get_loss_cut_info(
        &self,
        header: ctlh_trade_common::data::Header,
        is_today_flg: ctlh_common::data::OffOn,
        start_date: brpc_std::data::Date,
        end_date: brpc_std::data::Date,
        all_search_flg: ctlh_common::data::OffOn,
    ) -> Result<(
        ResultType,
        Option<Vec<ctlh_aamapp::data::LossCutInfoItem>>,
        Option<Vec<DataError>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_loss_cut_info, check_get_loss_cut_info, header, is_today_flg, start_date, end_date, all_search_flg; None;)
    }

    async fn get_closing_account_info_internal(
        &self,
        header: ctlh_trade_common::data::Header,
    ) -> Result<(
        ctlh_common::data::ResultType,
        Option<ctlh_trade_common::data::AccountReferInfo>,
        Option<brpc_std::data::Decimal>,
        Option<Vec<ctlh_trade_common::data::Error>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_closing_account_info_internal, check_get_closing_account_info_internal, header, ; None, None;)
    }

    async fn get_loss_cut_detail(
        &self,
        header: ctlh_trade_common::data::Header,
        loss_cut_no: u64,
    ) -> Result<(
        ctlh_common::data::ResultType,
        Option<Vec<ctlh_aamapp::data::JudgeLossCutDetail>>,
        Option<Vec<ctlh_aamapp::data::JudgeLossCutPos>>,
        Option<Vec<ctlh_aamapp::data::JudgeLossCutSettle>>,
        Option<Vec<ctlh_trade_common::data::Error>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_loss_cut_detail, check_get_loss_cut_detail, header, loss_cut_no; None, None, None;)
    }

    async fn get_account_info_internal(
        &self,
        header: ctlh_trade_common::data::Header,
        refer_time_cls: ctlh_common::data::ReferTimeCls,
    ) -> Result<(
        ctlh_common::data::ResultType,
        Option<brpc_std::data::Decimal>,
        Option<Vec<ctlh_aamapp::data::SellOpMinChargeInfo>>,
        Option<Vec<ctlh_trade_common::data::Error>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_account_info_internal, check_get_account_info_internal, header, refer_time_cls; None, None;)
    }

    async fn get_execution_list_internal(
        &self,
        header: ctlh_trade_common::data::Header,
        today_cls: ctlh_common::data::TodayCls,
        search_condition: ctlh_aamapp::data::SearchConditionExecutionInternal,
        all_search_flg: ctlh_common::data::OffOn,
    ) -> Result<(
        ctlh_common::data::ResultType,
        Option<Vec<ctlh_aamapp::data::ExecutionInfoAdmin>>,
        Option<Vec<ctlh_trade_common::data::Error>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_execution_list_internal, check_get_execution_list_internal, header, today_cls, search_condition, all_search_flg; None;)
    }

    async fn get_execution_list_csv(
        &self,
        header: ctlh_trade_common::data::Header,
        today_cls: ctlh_common::data::TodayCls,
        search_condition: ctlh_aamapp::data::SearchConditionExecutionInternal,
        all_search_flg: ctlh_common::data::OffOn,
    ) -> Result<(
        ctlh_common::data::ResultType,
        Option<Vec<ctlh_aamapp::data::ExecutionInfoAdmin>>,
        Option<Vec<ctlh_trade_common::data::Error>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_execution_list_csv, check_get_execution_list_csv, header, today_cls, search_condition, all_search_flg; None;)
    }

    async fn get_settle_order_position_list_internal(
        &self,
        header: ctlh_trade_common::data::Header,
        order_no: u64,
    ) -> Result<(
        ctlh_common::data::ResultType,
        Option<Vec<ctlh_aamapp::data::SettlePositionInfoAdmin>>,
        Option<Vec<ctlh_trade_common::data::Error>>,
    )> {
        invoke_api!(Self, self, "aamapp", get_settle_order_position_list_internal, check_get_settle_order_position_list_internal, header, order_no; None;)
    }
}
